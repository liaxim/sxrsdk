import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs 'src/main/libs', '../../sxr-libs/'
    }
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 21

        ndk {
            moduleName "sxr-platformsdk"
            if (rootProject.hasProperty("SXRSDK_ABI_FILTER")) {
                abiFilters rootProject.property("SXRSDK_ABI_FILTER")
            } else {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
        externalNativeBuild {
            cmake {
                //difference in sign extension when reinterpret_cast-ing a pointer between
                //gcc and clang hence overriding the default toolchain to match the one used
                //by the other modules
                arguments.add('-DOVR_PLATFORM_SDK=' + rootProject.property("OVR_PLATFORM_SDK"))
            }
        }
    }

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets.main {
        java.srcDirs = ['src/main/java']
        jni.srcDirs = [] // no auto generation of Android.mk
        // pre-compiled libraries
        jniLibs {
            srcDir 'src/main/libs'
            srcDir rootProject.property("OVR_PLATFORM_SDK") + '/Android/libs/'
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'src/main/libs', include: ['*.jar'])
    if(rootProject.hasProperty("buildGvrfAndDemos")) {
        compile project (':sxrsdk')
    } else {
        compile(name: 'sxrsdk-debug', ext: 'aar')
    }
}

task copyJarToBin(type: Copy) {
    outputs.upToDateWhen { false }
    from tasks.matching { it.name.startsWith('bundle') }
    into project.rootDir.absolutePath + "/../sxr-libs"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'bundleDebug') {
        task.finalizedBy(copyJarToBin)
    } else if (task.name == 'bundleRelease') {
        task.finalizedBy(copyJarToBin)
    }
}

clean {}.doLast {
    def sxrLibs = project.rootDir.absolutePath + "/../sxr-libs"
    if (file(sxrLibs).exists()) {
        project.delete(sxrLibs + '/' + project.name + '-release.aar')
        project.delete(sxrLibs + '/' + project.name + '-debug.aar')
    }
}
